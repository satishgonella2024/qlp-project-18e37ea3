```yaml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 0'  # Weekly dependency updates

jobs:
  setup:
    name: Setup Go Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Cache Go modules
        id: cache-go-modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Generate cache keys
        id: cache-keys
        run: echo "::set-output name=key::${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}"

  lint:
    name: Lint and Format
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Load cached Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run golint
        run: go install golang.org/x/lint/golint@latest && golint ./...

      - name: Run go fmt
        run: go fmt ./...

  test:
    name: Run Tests
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: [1.16, 1.17]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Load cached Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run tests with coverage
        run: |
          go test ./... -coverprofile=coverage.out
          go tool cover -func=coverage.out

  build:
    name: Build Binary
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16'

      - name: Load cached Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Build binary
        run: go build -o output_binary

  security_scan:
    name: Security Scanning
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Security Scan
        uses: github/codeql-action/analyze@v1

  release:
    name: Create Release
    needs: [build, security_scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
```
This configuration covers multiple operating systems, uses caching, performs linting, runs tests with coverage, builds the binary, performs security scanning, and creates releases.